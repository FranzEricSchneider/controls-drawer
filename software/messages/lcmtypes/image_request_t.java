/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class image_request_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long action_id;
    public byte format;
    public byte n_arguments;
    public String arg_names[];
    public String arg_values[];
    public String name;
    public String dest_channel;
    public long xDiffMM;
    public long yDiffMM;
 
    public image_request_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdb97a1aa9c0ddd4aL;
 
    public static final byte FORMAT_BGR = (byte) 1;
    public static final byte FORMAT_GRAY = (byte) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.image_request_t.class))
            return 0L;
 
        classes.add(lcmtypes.image_request_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.action_id); 
 
        outs.writeByte(this.format); 
 
        outs.writeByte(this.n_arguments); 
 
        for (int a = 0; a < this.n_arguments; a++) {
            __strbuf = new char[this.arg_names[a].length()]; this.arg_names[a].getChars(0, this.arg_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.n_arguments; a++) {
            __strbuf = new char[this.arg_values[a].length()]; this.arg_values[a].getChars(0, this.arg_values[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.dest_channel.length()]; this.dest_channel.getChars(0, this.dest_channel.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeLong(this.xDiffMM); 
 
        outs.writeLong(this.yDiffMM); 
 
    }
 
    public image_request_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public image_request_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.image_request_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.image_request_t o = new lcmtypes.image_request_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.action_id = ins.readLong();
 
        this.format = ins.readByte();
 
        this.n_arguments = ins.readByte();
 
        this.arg_names = new String[(int) n_arguments];
        for (int a = 0; a < this.n_arguments; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.arg_names[a] = new String(__strbuf);
        }
 
        this.arg_values = new String[(int) n_arguments];
        for (int a = 0; a < this.n_arguments; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.arg_values[a] = new String(__strbuf);
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.dest_channel = new String(__strbuf);
 
        this.xDiffMM = ins.readLong();
 
        this.yDiffMM = ins.readLong();
 
    }
 
    public lcmtypes.image_request_t copy()
    {
        lcmtypes.image_request_t outobj = new lcmtypes.image_request_t();
        outobj.utime = this.utime;
 
        outobj.action_id = this.action_id;
 
        outobj.format = this.format;
 
        outobj.n_arguments = this.n_arguments;
 
        outobj.arg_names = new String[(int) n_arguments];
        if (this.n_arguments > 0)
            System.arraycopy(this.arg_names, 0, outobj.arg_names, 0, this.n_arguments); 
        outobj.arg_values = new String[(int) n_arguments];
        if (this.n_arguments > 0)
            System.arraycopy(this.arg_values, 0, outobj.arg_values, 0, this.n_arguments); 
        outobj.name = this.name;
 
        outobj.dest_channel = this.dest_channel;
 
        outobj.xDiffMM = this.xDiffMM;
 
        outobj.yDiffMM = this.yDiffMM;
 
        return outobj;
    }
 
}

