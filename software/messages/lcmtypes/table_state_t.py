"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class table_state_t(object):
    __slots__ = ["utime", "low_limit_switch_x", "high_limit_switch_x", "low_limit_switch_y", "high_limit_switch_y", "encoder_x", "encoder_y", "tool_frame", "camera_frame"]

    def __init__(self):
        self.utime = 0
        self.low_limit_switch_x = False
        self.high_limit_switch_x = False
        self.low_limit_switch_y = False
        self.high_limit_switch_y = False
        self.encoder_x = 0
        self.encoder_y = 0
        self.tool_frame = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        self.camera_frame = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(table_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbbii", self.utime, self.low_limit_switch_x, self.high_limit_switch_x, self.low_limit_switch_y, self.high_limit_switch_y, self.encoder_x, self.encoder_y))
        for i0 in range(4):
            buf.write(struct.pack('>4d', *self.tool_frame[i0][:4]))
        for i0 in range(4):
            buf.write(struct.pack('>4d', *self.camera_frame[i0][:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != table_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return table_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = table_state_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.low_limit_switch_x = bool(struct.unpack('b', buf.read(1))[0])
        self.high_limit_switch_x = bool(struct.unpack('b', buf.read(1))[0])
        self.low_limit_switch_y = bool(struct.unpack('b', buf.read(1))[0])
        self.high_limit_switch_y = bool(struct.unpack('b', buf.read(1))[0])
        self.encoder_x, self.encoder_y = struct.unpack(">ii", buf.read(8))
        self.tool_frame = []
        for i0 in range(4):
            self.tool_frame.append(struct.unpack('>4d', buf.read(32)))
        self.camera_frame = []
        for i0 in range(4):
            self.camera_frame.append(struct.unpack('>4d', buf.read(32)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if table_state_t in parents: return 0
        tmphash = (0x3fb47cf4b219c284) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if table_state_t._packed_fingerprint is None:
            table_state_t._packed_fingerprint = struct.pack(">Q", table_state_t._get_hash_recursive([]))
        return table_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

