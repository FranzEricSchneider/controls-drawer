/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class table_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public boolean low_limit_switch_x;
    public boolean high_limit_switch_x;
    public boolean low_limit_switch_y;
    public boolean high_limit_switch_y;
    public int encoder_x;
    public int encoder_y;
    public double tool_frame[][];
    public double camera_frame[][];
 
    public table_state_t()
    {
        tool_frame = new double[4][4];
        camera_frame = new double[4][4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3fb47cf4b219c284L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.table_state_t.class))
            return 0L;
 
        classes.add(lcmtypes.table_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte( this.low_limit_switch_x ? 1 : 0); 
 
        outs.writeByte( this.high_limit_switch_x ? 1 : 0); 
 
        outs.writeByte( this.low_limit_switch_y ? 1 : 0); 
 
        outs.writeByte( this.high_limit_switch_y ? 1 : 0); 
 
        outs.writeInt(this.encoder_x); 
 
        outs.writeInt(this.encoder_y); 
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeDouble(this.tool_frame[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeDouble(this.camera_frame[a][b]); 
            }
        }
 
    }
 
    public table_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public table_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.table_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.table_state_t o = new lcmtypes.table_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.low_limit_switch_x = ins.readByte()!=0;
 
        this.high_limit_switch_x = ins.readByte()!=0;
 
        this.low_limit_switch_y = ins.readByte()!=0;
 
        this.high_limit_switch_y = ins.readByte()!=0;
 
        this.encoder_x = ins.readInt();
 
        this.encoder_y = ins.readInt();
 
        this.tool_frame = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                this.tool_frame[a][b] = ins.readDouble();
            }
        }
 
        this.camera_frame = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                this.camera_frame[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public lcmtypes.table_state_t copy()
    {
        lcmtypes.table_state_t outobj = new lcmtypes.table_state_t();
        outobj.utime = this.utime;
 
        outobj.low_limit_switch_x = this.low_limit_switch_x;
 
        outobj.high_limit_switch_x = this.high_limit_switch_x;
 
        outobj.low_limit_switch_y = this.low_limit_switch_y;
 
        outobj.high_limit_switch_y = this.high_limit_switch_y;
 
        outobj.encoder_x = this.encoder_x;
 
        outobj.encoder_y = this.encoder_y;
 
        outobj.tool_frame = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.tool_frame[a], 0, outobj.tool_frame[a], 0, 4);        }
 
        outobj.camera_frame = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.camera_frame[a], 0, outobj.camera_frame[a], 0, 4);        }
 
        return outobj;
    }
 
}

